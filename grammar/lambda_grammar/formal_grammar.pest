source_file = { declaration* }

// Top-level declaration kinds
declaration = { function_declaration | choice_declaration | struct_declaration  }


// Free-standing functions 
function_declaration = { function_signature ~ function_definition }
function_signature   = { ident ~ "::" ~ "(" ~ type_list? ~ ")" ~ (returns ~ type)? }
function_definition  = { ident  ~ ident_list? ~ def ~  block  }


// Enums (Sum types)
choice_declaration = { ident ~ "::" ~ "choice" ~ "{" ~ ident_list?  ~ "}" }
choice_kw          = { "choice" }

// Structs (Product types)
struct_declaration = { ident ~ "::" ~ "structure" ~ "{" ~ typed_ident_list? ~ "}" }
struct_kw          = { "structure" }


// Block 
block = { "{" ~ statement* ~ expression? ~ "}" }

// Statement kinds
statement = { ( var_bind | selection | indefinite_loop | definite_loop ) }

// let bindings
var_bind  = { "let" ~ ident ~ (type_hint)? ~ assign ~ expression ~ semicolon }
type_hint = { "::" ~ type }

// if-stmt control flow
selection = { if_comp ~ elif_comp* ~ else_comp? }
if_comp   = { "if" ~ expression ~ block }
elif_comp = { "elif" ~ expression ~ block }
else_comp = { "else" ~ block }

// While-loop control flow
indefinite_loop = { "while" ~ expression ~ block }

// for-loop control flow
definite_loop = { "for" ~ ident ~ "in" ~ int_literal ~ ".." ~ int_literal ~ block }

// Expressions 
// expression = { equal }
// equal      = { compare ~ (equal_op ~ compare)* }
// compare    = { term ~ (compar_op ~ term)* }
// term       = { factor ~ (term_op ~ factor)* }
// factor     = { unary ~ (fact_op ~ unary)* }
// unary      = { unary_op ~ unary |  atom }

expression  = { expr_literal | expr_ident | expr_binary_op }
expr_literal = { num_literal } 
expr_ident = { ident } 

// Atomic idents tokens
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
ident = @{ !digit ~ (alpha | digit)+ }


// Num Literal (note that they are constructed using raw representations!)
int_literal   = @{ ("-")? ~ digit ~ digit* }
float_literal = @{ ( digit ~ digit* ) ~ "." ~ (digit ~ digit*) } 
num_literal   = { float_literal | int_literal }

// Bool literal
bool_literal  = @{ "true" | "false" } 

// All literals
literal       = { num_literal | bool_literal }

// Smallest grammar units
atom = { literal | ident | "(" ~ expression ~ ")" } 

// Math operations
term_op = { plus | minus }
fact_op = { mul  | div }
plus    = @{ "+" }
minus   = @{ "-" }
mul     = @{ "*" }
div     = @{ "/" }

// Unary operators 
unary_op = { not }
not      = { "!" }

// Logical operations 
logic_op = { and | or }
and      = @{ "and" }
or       = @{ "or" }

// Equality operations 
equal_op = { eq | neq } 
eq       = @{ "==" }
neq      = @{ "!=" }

// Comparison operators
compar_op = { lt | lte | gt | gte } 
lt        = @{ "<" }
lte       = @{ "<=" }
gt        = @{ ">" }
gte       = @{ ">=" }

// Types 
type      = { primitive | adt }
primitive = { "int" | "float" | "text" | "bool" }
adt       = { ident }

// Used for function signature
type_list = { type ~ ("," ~ type)* } 


// Punctuation
type_qualifier = { "::" }
semicolon      = { ";" }
def            = { "=" }
returns        = { "->" }
assign         = { "<-" }

// Comma seperated idents
ident_list = { ident ~ ("," ~ ident)*  ~ ","? }

// Comma seperated typed-idents
typed_ident_list = { typed_ident ~ ("," ~ typed_ident)* ~ ","? }
typed_ident      = { ident ~ "::" ~ type}

// Special rules 
WHITESPACE = _{ " " | NEWLINE | "\t" | "\r"}
